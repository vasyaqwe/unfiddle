/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as JoinCodeImport } from './routes/join.$code'
import { Route as AuthedNewImport } from './routes/_authed/new'
import { Route as AuthedWorkspaceIdLayoutImport } from './routes/_authed/$workspaceId/_layout'
import { Route as AuthedWorkspaceIdLayoutIndexImport } from './routes/_authed/$workspaceId/_layout/index'
import { Route as AuthedWorkspaceIdLayoutTeamImport } from './routes/_authed/$workspaceId/_layout/team'
import { Route as AuthedWorkspaceIdLayoutAnalyticsImport } from './routes/_authed/$workspaceId/_layout/analytics'

// Create Virtual Routes

const AuthedWorkspaceIdImport = createFileRoute('/_authed/$workspaceId')()

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedWorkspaceIdRoute = AuthedWorkspaceIdImport.update({
  id: '/$workspaceId',
  path: '/$workspaceId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const JoinCodeRoute = JoinCodeImport.update({
  id: '/join/$code',
  path: '/join/$code',
  getParentRoute: () => rootRoute,
} as any)

const AuthedNewRoute = AuthedNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedWorkspaceIdLayoutRoute = AuthedWorkspaceIdLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthedWorkspaceIdRoute,
} as any)

const AuthedWorkspaceIdLayoutIndexRoute =
  AuthedWorkspaceIdLayoutIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedWorkspaceIdLayoutRoute,
  } as any)

const AuthedWorkspaceIdLayoutTeamRoute =
  AuthedWorkspaceIdLayoutTeamImport.update({
    id: '/team',
    path: '/team',
    getParentRoute: () => AuthedWorkspaceIdLayoutRoute,
  } as any)

const AuthedWorkspaceIdLayoutAnalyticsRoute =
  AuthedWorkspaceIdLayoutAnalyticsImport.update({
    id: '/analytics',
    path: '/analytics',
    getParentRoute: () => AuthedWorkspaceIdLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/new': {
      id: '/_authed/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof AuthedNewImport
      parentRoute: typeof AuthedImport
    }
    '/join/$code': {
      id: '/join/$code'
      path: '/join/$code'
      fullPath: '/join/$code'
      preLoaderRoute: typeof JoinCodeImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/$workspaceId': {
      id: '/_authed/$workspaceId'
      path: '/$workspaceId'
      fullPath: '/$workspaceId'
      preLoaderRoute: typeof AuthedWorkspaceIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/$workspaceId/_layout': {
      id: '/_authed/$workspaceId/_layout'
      path: '/$workspaceId'
      fullPath: '/$workspaceId'
      preLoaderRoute: typeof AuthedWorkspaceIdLayoutImport
      parentRoute: typeof AuthedWorkspaceIdRoute
    }
    '/_authed/$workspaceId/_layout/analytics': {
      id: '/_authed/$workspaceId/_layout/analytics'
      path: '/analytics'
      fullPath: '/$workspaceId/analytics'
      preLoaderRoute: typeof AuthedWorkspaceIdLayoutAnalyticsImport
      parentRoute: typeof AuthedWorkspaceIdLayoutImport
    }
    '/_authed/$workspaceId/_layout/team': {
      id: '/_authed/$workspaceId/_layout/team'
      path: '/team'
      fullPath: '/$workspaceId/team'
      preLoaderRoute: typeof AuthedWorkspaceIdLayoutTeamImport
      parentRoute: typeof AuthedWorkspaceIdLayoutImport
    }
    '/_authed/$workspaceId/_layout/': {
      id: '/_authed/$workspaceId/_layout/'
      path: '/'
      fullPath: '/$workspaceId/'
      preLoaderRoute: typeof AuthedWorkspaceIdLayoutIndexImport
      parentRoute: typeof AuthedWorkspaceIdLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthedWorkspaceIdLayoutRouteChildren {
  AuthedWorkspaceIdLayoutAnalyticsRoute: typeof AuthedWorkspaceIdLayoutAnalyticsRoute
  AuthedWorkspaceIdLayoutTeamRoute: typeof AuthedWorkspaceIdLayoutTeamRoute
  AuthedWorkspaceIdLayoutIndexRoute: typeof AuthedWorkspaceIdLayoutIndexRoute
}

const AuthedWorkspaceIdLayoutRouteChildren: AuthedWorkspaceIdLayoutRouteChildren =
  {
    AuthedWorkspaceIdLayoutAnalyticsRoute:
      AuthedWorkspaceIdLayoutAnalyticsRoute,
    AuthedWorkspaceIdLayoutTeamRoute: AuthedWorkspaceIdLayoutTeamRoute,
    AuthedWorkspaceIdLayoutIndexRoute: AuthedWorkspaceIdLayoutIndexRoute,
  }

const AuthedWorkspaceIdLayoutRouteWithChildren =
  AuthedWorkspaceIdLayoutRoute._addFileChildren(
    AuthedWorkspaceIdLayoutRouteChildren,
  )

interface AuthedWorkspaceIdRouteChildren {
  AuthedWorkspaceIdLayoutRoute: typeof AuthedWorkspaceIdLayoutRouteWithChildren
}

const AuthedWorkspaceIdRouteChildren: AuthedWorkspaceIdRouteChildren = {
  AuthedWorkspaceIdLayoutRoute: AuthedWorkspaceIdLayoutRouteWithChildren,
}

const AuthedWorkspaceIdRouteWithChildren =
  AuthedWorkspaceIdRoute._addFileChildren(AuthedWorkspaceIdRouteChildren)

interface AuthedRouteChildren {
  AuthedNewRoute: typeof AuthedNewRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedWorkspaceIdRoute: typeof AuthedWorkspaceIdRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedNewRoute: AuthedNewRoute,
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedWorkspaceIdRoute: AuthedWorkspaceIdRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/new': typeof AuthedNewRoute
  '/join/$code': typeof JoinCodeRoute
  '/': typeof AuthedIndexRoute
  '/$workspaceId': typeof AuthedWorkspaceIdLayoutRouteWithChildren
  '/$workspaceId/analytics': typeof AuthedWorkspaceIdLayoutAnalyticsRoute
  '/$workspaceId/team': typeof AuthedWorkspaceIdLayoutTeamRoute
  '/$workspaceId/': typeof AuthedWorkspaceIdLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/new': typeof AuthedNewRoute
  '/join/$code': typeof JoinCodeRoute
  '/': typeof AuthedIndexRoute
  '/$workspaceId': typeof AuthedWorkspaceIdLayoutIndexRoute
  '/$workspaceId/analytics': typeof AuthedWorkspaceIdLayoutAnalyticsRoute
  '/$workspaceId/team': typeof AuthedWorkspaceIdLayoutTeamRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_authed/new': typeof AuthedNewRoute
  '/join/$code': typeof JoinCodeRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/$workspaceId': typeof AuthedWorkspaceIdRouteWithChildren
  '/_authed/$workspaceId/_layout': typeof AuthedWorkspaceIdLayoutRouteWithChildren
  '/_authed/$workspaceId/_layout/analytics': typeof AuthedWorkspaceIdLayoutAnalyticsRoute
  '/_authed/$workspaceId/_layout/team': typeof AuthedWorkspaceIdLayoutTeamRoute
  '/_authed/$workspaceId/_layout/': typeof AuthedWorkspaceIdLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/new'
    | '/join/$code'
    | '/'
    | '/$workspaceId'
    | '/$workspaceId/analytics'
    | '/$workspaceId/team'
    | '/$workspaceId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/signup'
    | '/new'
    | '/join/$code'
    | '/'
    | '/$workspaceId'
    | '/$workspaceId/analytics'
    | '/$workspaceId/team'
  id:
    | '__root__'
    | '/_authed'
    | '/login'
    | '/signup'
    | '/_authed/new'
    | '/join/$code'
    | '/_authed/'
    | '/_authed/$workspaceId'
    | '/_authed/$workspaceId/_layout'
    | '/_authed/$workspaceId/_layout/analytics'
    | '/_authed/$workspaceId/_layout/team'
    | '/_authed/$workspaceId/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  JoinCodeRoute: typeof JoinCodeRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  JoinCodeRoute: JoinCodeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login",
        "/signup",
        "/join/$code"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/new",
        "/_authed/",
        "/_authed/$workspaceId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/new": {
      "filePath": "_authed/new.tsx",
      "parent": "/_authed"
    },
    "/join/$code": {
      "filePath": "join.$code.tsx"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/$workspaceId": {
      "filePath": "_authed/$workspaceId",
      "parent": "/_authed",
      "children": [
        "/_authed/$workspaceId/_layout"
      ]
    },
    "/_authed/$workspaceId/_layout": {
      "filePath": "_authed/$workspaceId/_layout.tsx",
      "parent": "/_authed/$workspaceId",
      "children": [
        "/_authed/$workspaceId/_layout/analytics",
        "/_authed/$workspaceId/_layout/team",
        "/_authed/$workspaceId/_layout/"
      ]
    },
    "/_authed/$workspaceId/_layout/analytics": {
      "filePath": "_authed/$workspaceId/_layout/analytics.tsx",
      "parent": "/_authed/$workspaceId/_layout"
    },
    "/_authed/$workspaceId/_layout/team": {
      "filePath": "_authed/$workspaceId/_layout/team.tsx",
      "parent": "/_authed/$workspaceId/_layout"
    },
    "/_authed/$workspaceId/_layout/": {
      "filePath": "_authed/$workspaceId/_layout/index.tsx",
      "parent": "/_authed/$workspaceId/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
